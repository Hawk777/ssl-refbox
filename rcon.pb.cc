// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rcon.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rcon.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SSL_RefereeRemoteControlRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSL_RefereeRemoteControlRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SSL_RefereeRemoteControlRequest_CardType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SSL_RefereeRemoteControlRequest_CardTeam_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SSL_RefereeRemoteControlReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSL_RefereeRemoteControlReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SSL_RefereeRemoteControlReply_Outcome_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_rcon_2eproto() {
  protobuf_AddDesc_rcon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rcon.proto");
  GOOGLE_CHECK(file != NULL);
  SSL_RefereeRemoteControlRequest_descriptor_ = file->message_type(0);
  static const int SSL_RefereeRemoteControlRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_RefereeRemoteControlRequest, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_RefereeRemoteControlRequest, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_RefereeRemoteControlRequest, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_RefereeRemoteControlRequest, designated_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_RefereeRemoteControlRequest, designated_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_RefereeRemoteControlRequest, card_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_RefereeRemoteControlRequest, card_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_RefereeRemoteControlRequest, last_command_counter_),
  };
  SSL_RefereeRemoteControlRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SSL_RefereeRemoteControlRequest_descriptor_,
      SSL_RefereeRemoteControlRequest::default_instance_,
      SSL_RefereeRemoteControlRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_RefereeRemoteControlRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_RefereeRemoteControlRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SSL_RefereeRemoteControlRequest));
  SSL_RefereeRemoteControlRequest_CardType_descriptor_ = SSL_RefereeRemoteControlRequest_descriptor_->enum_type(0);
  SSL_RefereeRemoteControlRequest_CardTeam_descriptor_ = SSL_RefereeRemoteControlRequest_descriptor_->enum_type(1);
  SSL_RefereeRemoteControlReply_descriptor_ = file->message_type(1);
  static const int SSL_RefereeRemoteControlReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_RefereeRemoteControlReply, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_RefereeRemoteControlReply, outcome_),
  };
  SSL_RefereeRemoteControlReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SSL_RefereeRemoteControlReply_descriptor_,
      SSL_RefereeRemoteControlReply::default_instance_,
      SSL_RefereeRemoteControlReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_RefereeRemoteControlReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_RefereeRemoteControlReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SSL_RefereeRemoteControlReply));
  SSL_RefereeRemoteControlReply_Outcome_descriptor_ = SSL_RefereeRemoteControlReply_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rcon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SSL_RefereeRemoteControlRequest_descriptor_, &SSL_RefereeRemoteControlRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SSL_RefereeRemoteControlReply_descriptor_, &SSL_RefereeRemoteControlReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rcon_2eproto() {
  delete SSL_RefereeRemoteControlRequest::default_instance_;
  delete SSL_RefereeRemoteControlRequest_reflection_;
  delete SSL_RefereeRemoteControlReply::default_instance_;
  delete SSL_RefereeRemoteControlReply_reflection_;
}

void protobuf_AddDesc_rcon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_referee_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nrcon.proto\032\rreferee.proto\"\234\003\n\037SSL_Refe"
    "reeRemoteControlRequest\022\022\n\nmessage_id\030\001 "
    "\002(\r\022!\n\005stage\030\002 \001(\0162\022.SSL_Referee.Stage\022%"
    "\n\007command\030\003 \001(\0162\024.SSL_Referee.Command\022\024\n"
    "\014designated_x\030\004 \001(\002\022\024\n\014designated_y\030\005 \001("
    "\002\022<\n\tcard_type\030\006 \001(\0162).SSL_RefereeRemote"
    "ControlRequest.CardType\022<\n\tcard_team\030\007 \001"
    "(\0162).SSL_RefereeRemoteControlRequest.Car"
    "dTeam\022\034\n\024last_command_counter\030\010 \001(\r\")\n\010C"
    "ardType\022\017\n\013CARD_YELLOW\020\000\022\014\n\010CARD_RED\020\001\"*"
    "\n\010CardTeam\022\017\n\013TEAM_YELLOW\020\000\022\r\n\tTEAM_BLUE"
    "\020\001\"\376\001\n\035SSL_RefereeRemoteControlReply\022\022\n\n"
    "message_id\030\001 \002(\r\0227\n\007outcome\030\002 \002(\0162&.SSL_"
    "RefereeRemoteControlReply.Outcome\"\217\001\n\007Ou"
    "tcome\022\006\n\002OK\020\000\022\024\n\020MULTIPLE_ACTIONS\020\001\022\r\n\tB"
    "AD_STAGE\020\002\022\017\n\013BAD_COMMAND\020\003\022\033\n\027BAD_DESIG"
    "NATED_POSITION\020\004\022\020\n\014PARTIAL_CARD\020\005\022\027\n\023BA"
    "D_COMMAND_COUNTER\020\006", 699);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rcon.proto", &protobuf_RegisterTypes);
  SSL_RefereeRemoteControlRequest::default_instance_ = new SSL_RefereeRemoteControlRequest();
  SSL_RefereeRemoteControlReply::default_instance_ = new SSL_RefereeRemoteControlReply();
  SSL_RefereeRemoteControlRequest::default_instance_->InitAsDefaultInstance();
  SSL_RefereeRemoteControlReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rcon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rcon_2eproto {
  StaticDescriptorInitializer_rcon_2eproto() {
    protobuf_AddDesc_rcon_2eproto();
  }
} static_descriptor_initializer_rcon_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* SSL_RefereeRemoteControlRequest_CardType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSL_RefereeRemoteControlRequest_CardType_descriptor_;
}
bool SSL_RefereeRemoteControlRequest_CardType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SSL_RefereeRemoteControlRequest_CardType SSL_RefereeRemoteControlRequest::CARD_YELLOW;
const SSL_RefereeRemoteControlRequest_CardType SSL_RefereeRemoteControlRequest::CARD_RED;
const SSL_RefereeRemoteControlRequest_CardType SSL_RefereeRemoteControlRequest::CardType_MIN;
const SSL_RefereeRemoteControlRequest_CardType SSL_RefereeRemoteControlRequest::CardType_MAX;
const int SSL_RefereeRemoteControlRequest::CardType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* SSL_RefereeRemoteControlRequest_CardTeam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSL_RefereeRemoteControlRequest_CardTeam_descriptor_;
}
bool SSL_RefereeRemoteControlRequest_CardTeam_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SSL_RefereeRemoteControlRequest_CardTeam SSL_RefereeRemoteControlRequest::TEAM_YELLOW;
const SSL_RefereeRemoteControlRequest_CardTeam SSL_RefereeRemoteControlRequest::TEAM_BLUE;
const SSL_RefereeRemoteControlRequest_CardTeam SSL_RefereeRemoteControlRequest::CardTeam_MIN;
const SSL_RefereeRemoteControlRequest_CardTeam SSL_RefereeRemoteControlRequest::CardTeam_MAX;
const int SSL_RefereeRemoteControlRequest::CardTeam_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SSL_RefereeRemoteControlRequest::kMessageIdFieldNumber;
const int SSL_RefereeRemoteControlRequest::kStageFieldNumber;
const int SSL_RefereeRemoteControlRequest::kCommandFieldNumber;
const int SSL_RefereeRemoteControlRequest::kDesignatedXFieldNumber;
const int SSL_RefereeRemoteControlRequest::kDesignatedYFieldNumber;
const int SSL_RefereeRemoteControlRequest::kCardTypeFieldNumber;
const int SSL_RefereeRemoteControlRequest::kCardTeamFieldNumber;
const int SSL_RefereeRemoteControlRequest::kLastCommandCounterFieldNumber;
#endif  // !_MSC_VER

SSL_RefereeRemoteControlRequest::SSL_RefereeRemoteControlRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SSL_RefereeRemoteControlRequest::InitAsDefaultInstance() {
}

SSL_RefereeRemoteControlRequest::SSL_RefereeRemoteControlRequest(const SSL_RefereeRemoteControlRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SSL_RefereeRemoteControlRequest::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0u;
  stage_ = 0;
  command_ = 0;
  designated_x_ = 0;
  designated_y_ = 0;
  card_type_ = 0;
  card_team_ = 0;
  last_command_counter_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSL_RefereeRemoteControlRequest::~SSL_RefereeRemoteControlRequest() {
  SharedDtor();
}

void SSL_RefereeRemoteControlRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SSL_RefereeRemoteControlRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSL_RefereeRemoteControlRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSL_RefereeRemoteControlRequest_descriptor_;
}

const SSL_RefereeRemoteControlRequest& SSL_RefereeRemoteControlRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rcon_2eproto();
  return *default_instance_;
}

SSL_RefereeRemoteControlRequest* SSL_RefereeRemoteControlRequest::default_instance_ = NULL;

SSL_RefereeRemoteControlRequest* SSL_RefereeRemoteControlRequest::New() const {
  return new SSL_RefereeRemoteControlRequest;
}

void SSL_RefereeRemoteControlRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0u;
    stage_ = 0;
    command_ = 0;
    designated_x_ = 0;
    designated_y_ = 0;
    card_type_ = 0;
    card_team_ = 0;
    last_command_counter_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SSL_RefereeRemoteControlRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stage;
        break;
      }

      // optional .SSL_Referee.Stage stage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSL_Referee_Stage_IsValid(value)) {
            set_stage(static_cast< ::SSL_Referee_Stage >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_command;
        break;
      }

      // optional .SSL_Referee.Command command = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_command:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSL_Referee_Command_IsValid(value)) {
            set_command(static_cast< ::SSL_Referee_Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_designated_x;
        break;
      }

      // optional float designated_x = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_designated_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &designated_x_)));
          set_has_designated_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_designated_y;
        break;
      }

      // optional float designated_y = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_designated_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &designated_y_)));
          set_has_designated_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_card_type;
        break;
      }

      // optional .SSL_RefereeRemoteControlRequest.CardType card_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSL_RefereeRemoteControlRequest_CardType_IsValid(value)) {
            set_card_type(static_cast< ::SSL_RefereeRemoteControlRequest_CardType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_card_team;
        break;
      }

      // optional .SSL_RefereeRemoteControlRequest.CardTeam card_team = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_team:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSL_RefereeRemoteControlRequest_CardTeam_IsValid(value)) {
            set_card_team(static_cast< ::SSL_RefereeRemoteControlRequest_CardTeam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_last_command_counter;
        break;
      }

      // optional uint32 last_command_counter = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_command_counter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_command_counter_)));
          set_has_last_command_counter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SSL_RefereeRemoteControlRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->message_id(), output);
  }

  // optional .SSL_Referee.Stage stage = 2;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->stage(), output);
  }

  // optional .SSL_Referee.Command command = 3;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->command(), output);
  }

  // optional float designated_x = 4;
  if (has_designated_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->designated_x(), output);
  }

  // optional float designated_y = 5;
  if (has_designated_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->designated_y(), output);
  }

  // optional .SSL_RefereeRemoteControlRequest.CardType card_type = 6;
  if (has_card_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->card_type(), output);
  }

  // optional .SSL_RefereeRemoteControlRequest.CardTeam card_team = 7;
  if (has_card_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->card_team(), output);
  }

  // optional uint32 last_command_counter = 8;
  if (has_last_command_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->last_command_counter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SSL_RefereeRemoteControlRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->message_id(), target);
  }

  // optional .SSL_Referee.Stage stage = 2;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->stage(), target);
  }

  // optional .SSL_Referee.Command command = 3;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->command(), target);
  }

  // optional float designated_x = 4;
  if (has_designated_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->designated_x(), target);
  }

  // optional float designated_y = 5;
  if (has_designated_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->designated_y(), target);
  }

  // optional .SSL_RefereeRemoteControlRequest.CardType card_type = 6;
  if (has_card_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->card_type(), target);
  }

  // optional .SSL_RefereeRemoteControlRequest.CardTeam card_team = 7;
  if (has_card_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->card_team(), target);
  }

  // optional uint32 last_command_counter = 8;
  if (has_last_command_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->last_command_counter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SSL_RefereeRemoteControlRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_id());
    }

    // optional .SSL_Referee.Stage stage = 2;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stage());
    }

    // optional .SSL_Referee.Command command = 3;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());
    }

    // optional float designated_x = 4;
    if (has_designated_x()) {
      total_size += 1 + 4;
    }

    // optional float designated_y = 5;
    if (has_designated_y()) {
      total_size += 1 + 4;
    }

    // optional .SSL_RefereeRemoteControlRequest.CardType card_type = 6;
    if (has_card_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->card_type());
    }

    // optional .SSL_RefereeRemoteControlRequest.CardTeam card_team = 7;
    if (has_card_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->card_team());
    }

    // optional uint32 last_command_counter = 8;
    if (has_last_command_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_command_counter());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSL_RefereeRemoteControlRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SSL_RefereeRemoteControlRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SSL_RefereeRemoteControlRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SSL_RefereeRemoteControlRequest::MergeFrom(const SSL_RefereeRemoteControlRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_stage()) {
      set_stage(from.stage());
    }
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_designated_x()) {
      set_designated_x(from.designated_x());
    }
    if (from.has_designated_y()) {
      set_designated_y(from.designated_y());
    }
    if (from.has_card_type()) {
      set_card_type(from.card_type());
    }
    if (from.has_card_team()) {
      set_card_team(from.card_team());
    }
    if (from.has_last_command_counter()) {
      set_last_command_counter(from.last_command_counter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SSL_RefereeRemoteControlRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_RefereeRemoteControlRequest::CopyFrom(const SSL_RefereeRemoteControlRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_RefereeRemoteControlRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SSL_RefereeRemoteControlRequest::Swap(SSL_RefereeRemoteControlRequest* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(stage_, other->stage_);
    std::swap(command_, other->command_);
    std::swap(designated_x_, other->designated_x_);
    std::swap(designated_y_, other->designated_y_);
    std::swap(card_type_, other->card_type_);
    std::swap(card_team_, other->card_team_);
    std::swap(last_command_counter_, other->last_command_counter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SSL_RefereeRemoteControlRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSL_RefereeRemoteControlRequest_descriptor_;
  metadata.reflection = SSL_RefereeRemoteControlRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SSL_RefereeRemoteControlReply_Outcome_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSL_RefereeRemoteControlReply_Outcome_descriptor_;
}
bool SSL_RefereeRemoteControlReply_Outcome_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SSL_RefereeRemoteControlReply_Outcome SSL_RefereeRemoteControlReply::OK;
const SSL_RefereeRemoteControlReply_Outcome SSL_RefereeRemoteControlReply::MULTIPLE_ACTIONS;
const SSL_RefereeRemoteControlReply_Outcome SSL_RefereeRemoteControlReply::BAD_STAGE;
const SSL_RefereeRemoteControlReply_Outcome SSL_RefereeRemoteControlReply::BAD_COMMAND;
const SSL_RefereeRemoteControlReply_Outcome SSL_RefereeRemoteControlReply::BAD_DESIGNATED_POSITION;
const SSL_RefereeRemoteControlReply_Outcome SSL_RefereeRemoteControlReply::PARTIAL_CARD;
const SSL_RefereeRemoteControlReply_Outcome SSL_RefereeRemoteControlReply::BAD_COMMAND_COUNTER;
const SSL_RefereeRemoteControlReply_Outcome SSL_RefereeRemoteControlReply::Outcome_MIN;
const SSL_RefereeRemoteControlReply_Outcome SSL_RefereeRemoteControlReply::Outcome_MAX;
const int SSL_RefereeRemoteControlReply::Outcome_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SSL_RefereeRemoteControlReply::kMessageIdFieldNumber;
const int SSL_RefereeRemoteControlReply::kOutcomeFieldNumber;
#endif  // !_MSC_VER

SSL_RefereeRemoteControlReply::SSL_RefereeRemoteControlReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SSL_RefereeRemoteControlReply::InitAsDefaultInstance() {
}

SSL_RefereeRemoteControlReply::SSL_RefereeRemoteControlReply(const SSL_RefereeRemoteControlReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SSL_RefereeRemoteControlReply::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0u;
  outcome_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSL_RefereeRemoteControlReply::~SSL_RefereeRemoteControlReply() {
  SharedDtor();
}

void SSL_RefereeRemoteControlReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SSL_RefereeRemoteControlReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSL_RefereeRemoteControlReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSL_RefereeRemoteControlReply_descriptor_;
}

const SSL_RefereeRemoteControlReply& SSL_RefereeRemoteControlReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rcon_2eproto();
  return *default_instance_;
}

SSL_RefereeRemoteControlReply* SSL_RefereeRemoteControlReply::default_instance_ = NULL;

SSL_RefereeRemoteControlReply* SSL_RefereeRemoteControlReply::New() const {
  return new SSL_RefereeRemoteControlReply;
}

void SSL_RefereeRemoteControlReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = 0u;
    outcome_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SSL_RefereeRemoteControlReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_outcome;
        break;
      }

      // required .SSL_RefereeRemoteControlReply.Outcome outcome = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outcome:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSL_RefereeRemoteControlReply_Outcome_IsValid(value)) {
            set_outcome(static_cast< ::SSL_RefereeRemoteControlReply_Outcome >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SSL_RefereeRemoteControlReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->message_id(), output);
  }

  // required .SSL_RefereeRemoteControlReply.Outcome outcome = 2;
  if (has_outcome()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->outcome(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SSL_RefereeRemoteControlReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->message_id(), target);
  }

  // required .SSL_RefereeRemoteControlReply.Outcome outcome = 2;
  if (has_outcome()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->outcome(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SSL_RefereeRemoteControlReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_id());
    }

    // required .SSL_RefereeRemoteControlReply.Outcome outcome = 2;
    if (has_outcome()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->outcome());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSL_RefereeRemoteControlReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SSL_RefereeRemoteControlReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SSL_RefereeRemoteControlReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SSL_RefereeRemoteControlReply::MergeFrom(const SSL_RefereeRemoteControlReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_outcome()) {
      set_outcome(from.outcome());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SSL_RefereeRemoteControlReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_RefereeRemoteControlReply::CopyFrom(const SSL_RefereeRemoteControlReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_RefereeRemoteControlReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SSL_RefereeRemoteControlReply::Swap(SSL_RefereeRemoteControlReply* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(outcome_, other->outcome_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SSL_RefereeRemoteControlReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSL_RefereeRemoteControlReply_descriptor_;
  metadata.reflection = SSL_RefereeRemoteControlReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
